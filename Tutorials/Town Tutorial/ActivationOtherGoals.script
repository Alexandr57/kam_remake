{$IFNDEF THIS_SCRIPT_IS_LOADED_AOG}
{$DEFINE THIS_SCRIPT_IS_LOADED_AOG}

procedure GoalsDone(aNumGoal: Integer; aIDPlayer: Integer);
var
	I: Integer;
	arr: Array of Integer;
begin
	Case aNumGoal of
		0:	begin
				UpdateGoal(aNumGoal, gsDone, '', False, True, False, False);
				UpdateGoal(aNumGoal + 1, gsAvailable, '', True, True, False, False);
				UpdateGoal(aNumGoal + 2, gsAvailable, '', True, True, False, False);
				
				A.UnitBlock(aIDPlayer, UT_SERF, False);
				A.UnitBlock(aIDPlayer, UT_LABORER, False);
				A.UnitBlock(aIDPlayer, UT_WOODCUTTER, False);
				A.UnitBlock(aIDPlayer, UT_CARPENTER, False);
				A.UnitBlock(aIDPlayer, UT_FISHERMAN, False);
				A.UnitBlock(aIDPlayer, UT_FARMER, False);
				A.UnitBlock(aIDPlayer, UT_BAKER, False);
				A.UnitBlock(aIDPlayer, UT_RECRUIT, False);
				A.UnitBlock(aIDPlayer, UT_MILITIA, False);
				A.UnitBlock(aIDPlayer, UT_BOWMAN, False);
				
				arr := S.PlayerGetAllHouses(aIDPlayer);
				for I := Low(arr) to High(arr) do
					A.HouseDisableUnoccupiedMessage(arr[I], False);
				
				A.ShowMsg(aIDPlayer, '<$13>');
			end;
		1:	begin
				UpdateGoal(aNumGoal, gsDone, '', False, True, False, False);
				A.PlayerWin([aIDPlayer], True);
			end;
		2:	begin
				UpdateGoal(aNumGoal, gsDone, '', False, True, False, False);
			end;
	end;
end;

procedure GoalsFail(aNumGoal: Integer; aIDPlayer: Integer);
begin
	
end;

{$ENDIF}